{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/joshunwin/code/josh-unwin/tina-nextjs/pages/_app.tsx\",\n    _this2 = this;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport App from 'next/app';\nimport { TinaCMS, TinaProvider } from 'tinacms';\nimport { GithubClient, TinacmsGithubProvider } from 'react-tinacms-github';\n\nvar Site = /*#__PURE__*/function (_App) {\n  _inherits(Site, _App);\n\n  var _super = _createSuper(Site);\n\n  function Site(props) {\n    var _this;\n\n    _classCallCheck(this, Site);\n\n    _this = _super.call(this, props);\n    /**\n     * 1. Create the TinaCMS instance\n     */\n\n    _defineProperty(_assertThisInitialized(_this), \"cms\", void 0);\n\n    _this.cms = new TinaCMS({\n      enabled: props.pageProps.preview,\n      apis: {\n        /**\n         * 2. Register the GithubClient\n         */\n        github: new GithubClient({\n          proxy: '/api/proxy-github',\n          authCallbackRoute: '/api/create-github-access-token',\n          clientId: process.env.GITHUB_CLIENT_ID,\n          baseRepoFullName: process.env.REPO_FULL_NAME // e.g: tinacms/tinacms.org,\n\n        })\n      },\n\n      /**\n       * 3. Use the Sidebar and Toolbar\n       */\n      sidebar: props.pageProps.preview,\n      toolbar: props.pageProps.preview\n    });\n    return _this;\n  }\n\n  _createClass(Site, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      return (\n        /**\n         * 4. Wrap the page Component with the Tina and Github providers\n         */\n        __jsx(TinaProvider, {\n          cms: this.cms,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 7\n          }\n        }, __jsx(TinacmsGithubProvider, {\n          onLogin: onLogin,\n          onLogout: onLogout,\n          error: pageProps.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 9\n          }\n        }, __jsx(EditLink, {\n          cms: this.cms,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }\n        }), __jsx(Component, _extends({}, pageProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }\n        }))))\n      );\n    }\n  }]);\n\n  return Site;\n}(App);\n\nexport { Site as default };\n\nvar onLogin = function onLogin() {\n  var token = localStorage.getItem('tinacms-github-token') || null;\n  var headers = new Headers();\n\n  if (token) {\n    headers.append('Authorization', 'Bearer ' + token);\n  }\n\n  return fetch(\"/api/preview\", {\n    headers: headers\n  }).then(function () {\n    window.location.href = window.location.pathname;\n  });\n};\n\nvar onLogout = function onLogout() {\n  return fetch(\"/api/reset-preview\").then(function () {\n    window.location.reload();\n  });\n};\n\nexport var EditLink = function EditLink(_ref) {\n  var cms = _ref.cms;\n  return __jsx(\"button\", {\n    onClick: function onClick() {\n      return cms.toggle();\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, cms.enabled ? 'Exit Edit Mode' : 'Edit This Site');\n};\n_c = EditLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditLink\");","map":{"version":3,"sources":["/Users/joshunwin/code/josh-unwin/tina-nextjs/pages/_app.tsx"],"names":["App","TinaCMS","TinaProvider","GithubClient","TinacmsGithubProvider","Site","props","cms","enabled","pageProps","preview","apis","github","proxy","authCallbackRoute","clientId","process","env","GITHUB_CLIENT_ID","baseRepoFullName","REPO_FULL_NAME","sidebar","toolbar","Component","onLogin","onLogout","error","token","localStorage","getItem","headers","Headers","append","fetch","then","window","location","href","pathname","reload","EditLink","toggle"],"mappings":"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","sourcesContent":["import App from 'next/app'\nimport { TinaCMS, TinaProvider } from 'tinacms'\nimport {\n  GithubClient,\n  TinacmsGithubProvider,\n} from 'react-tinacms-github'\n\nexport default class Site extends App {\n  cms: TinaCMS\n\n  constructor(props) {\n    super(props)\n    /**\n     * 1. Create the TinaCMS instance\n     */\n    this.cms = new TinaCMS({\n      enabled: props.pageProps.preview,\n      apis: {\n        /**\n         * 2. Register the GithubClient\n         */\n        github: new GithubClient({\n          proxy: '/api/proxy-github',\n          authCallbackRoute: '/api/create-github-access-token',\n          clientId: process.env.GITHUB_CLIENT_ID,\n          baseRepoFullName: process.env.REPO_FULL_NAME, // e.g: tinacms/tinacms.org,\n        }),\n      },\n      /**\n       * 3. Use the Sidebar and Toolbar\n       */\n      sidebar: props.pageProps.preview,\n      toolbar: props.pageProps.preview,\n    })\n  }\n\n  render() {\n    const { Component, pageProps } = this.props\n    return (\n      /**\n       * 4. Wrap the page Component with the Tina and Github providers\n       */\n      <TinaProvider cms={this.cms}>\n        <TinacmsGithubProvider\n          onLogin={onLogin}\n          onLogout={onLogout}\n          error={pageProps.error}\n        >\n          {/**\n           * 5. Add a button for entering Preview/Edit Mode\n           */}\n          <EditLink cms={this.cms} />\n          <Component {...pageProps} />\n        </TinacmsGithubProvider>\n      </TinaProvider>\n    )\n  }\n}\n\n\nconst onLogin = () => {\n\tconst token = localStorage.getItem('tinacms-github-token') || null\n  const headers = new Headers()\n\n  if (token) {\n    headers.append('Authorization', 'Bearer ' + token)\n  }\n\n  return fetch(`/api/preview`, { headers: headers }).then(() => {\n    window.location.href = window.location.pathname\n  })\n}\n\nconst onLogout = () => {\n  return fetch(`/api/reset-preview`).then(() => {\n    window.location.reload()\n  })\n}\n\nexport interface EditLinkProps {\n  cms: TinaCMS\n}\n\nexport const EditLink = ({ cms }: EditLinkProps) => {\n  return (\n    <button onClick={() => cms.toggle()}>\n      {cms.enabled ? 'Exit Edit Mode' : 'Edit This Site'}\n    </button>\n  )\n}"]},"metadata":{},"sourceType":"module"}