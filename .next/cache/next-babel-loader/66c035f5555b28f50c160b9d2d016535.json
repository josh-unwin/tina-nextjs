{"ast":null,"code":"var _jsxFileName = \"/Users/joshunwin/code/josh-unwin/tina-nextjs/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from 'next/app';\nimport { TinaCMS, TinaProvider } from 'tinacms';\nimport { GithubClient, TinacmsGithubProvider } from 'react-tinacms-github';\nexport default class Site extends App {\n  constructor(props) {\n    super(props);\n    /**\n     * 1. Create the TinaCMS instance\n     */\n\n    _defineProperty(this, \"cms\", void 0);\n\n    this.cms = new TinaCMS({\n      enabled: props.pageProps.preview,\n      apis: {\n        /**\n         * 2. Register the GithubClient\n         */\n        github: new GithubClient({\n          proxy: '/api/proxy-github',\n          authCallbackRoute: '/api/create-github-access-token',\n          clientId: process.env.GITHUB_CLIENT_ID,\n          baseRepoFullName: process.env.REPO_FULL_NAME // e.g: tinacms/tinacms.org,\n\n        })\n      },\n\n      /**\n       * 3. Use the Sidebar and Toolbar\n       */\n      sidebar: props.pageProps.preview,\n      toolbar: props.pageProps.preview\n    });\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return (\n      /**\n       * 4. Wrap the page Component with the Tina and Github providers\n       */\n      __jsx(TinaProvider, {\n        cms: this.cms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, __jsx(TinacmsGithubProvider, {\n        onLogin: onLogin,\n        onLogout: onLogout,\n        error: pageProps.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, __jsx(EditLink, {\n        cms: this.cms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }), __jsx(Component, _extends({}, pageProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }))))\n    );\n  }\n\n}\n\nconst onLogin = () => {\n  const token = localStorage.getItem('tinacms-github-token') || null;\n  const headers = new Headers();\n\n  if (token) {\n    headers.append('Authorization', 'Bearer ' + token);\n  }\n\n  return fetch(`/api/preview`, {\n    headers: headers\n  }).then(() => {\n    window.location.href = window.location.pathname;\n  });\n};\n\nconst onLogout = () => {\n  return fetch(`/api/reset-preview`).then(() => {\n    window.location.reload();\n  });\n};\n\nexport const EditLink = ({\n  cms\n}) => {\n  return __jsx(\"button\", {\n    onClick: () => cms.toggle(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, cms.enabled ? 'Exit Edit Mode' : 'Edit This Site');\n};","map":{"version":3,"sources":["/Users/joshunwin/code/josh-unwin/tina-nextjs/pages/_app.tsx"],"names":["App","TinaCMS","TinaProvider","GithubClient","TinacmsGithubProvider","Site","constructor","props","cms","enabled","pageProps","preview","apis","github","proxy","authCallbackRoute","clientId","process","env","GITHUB_CLIENT_ID","baseRepoFullName","REPO_FULL_NAME","sidebar","toolbar","render","Component","onLogin","onLogout","error","token","localStorage","getItem","headers","Headers","append","fetch","then","window","location","href","pathname","reload","EditLink","toggle"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,SAAtC;AACA,SACEC,YADF,EAEEC,qBAFF,QAGO,sBAHP;AAKA,eAAe,MAAMC,IAAN,SAAmBL,GAAnB,CAAuB;AAGpCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA;;;;AAFiB;;AAKjB,SAAKC,GAAL,GAAW,IAAIP,OAAJ,CAAY;AACrBQ,MAAAA,OAAO,EAAEF,KAAK,CAACG,SAAN,CAAgBC,OADJ;AAErBC,MAAAA,IAAI,EAAE;AACJ;;;AAGAC,QAAAA,MAAM,EAAE,IAAIV,YAAJ,CAAiB;AACvBW,UAAAA,KAAK,EAAE,mBADgB;AAEvBC,UAAAA,iBAAiB,EAAE,iCAFI;AAGvBC,UAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBAHC;AAIvBC,UAAAA,gBAAgB,EAAEH,OAAO,CAACC,GAAR,CAAYG,cAJP,CAIuB;;AAJvB,SAAjB;AAJJ,OAFe;;AAarB;;;AAGAC,MAAAA,OAAO,EAAEf,KAAK,CAACG,SAAN,CAAgBC,OAhBJ;AAiBrBY,MAAAA,OAAO,EAAEhB,KAAK,CAACG,SAAN,CAAgBC;AAjBJ,KAAZ,CAAX;AAmBD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaf,MAAAA;AAAb,QAA2B,KAAKH,KAAtC;AACA;AACE;;;AAGA,YAAC,YAAD;AAAc,QAAA,GAAG,EAAE,KAAKC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,qBAAD;AACE,QAAA,OAAO,EAAEkB,OADX;AAEE,QAAA,QAAQ,EAAEC,QAFZ;AAGE,QAAA,KAAK,EAAEjB,SAAS,CAACkB,KAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,MAAC,QAAD;AAAU,QAAA,GAAG,EAAE,KAAKpB,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,EASE,MAAC,SAAD,eAAeE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SATF,CADF;AAJF;AAkBD;;AAjDmC;;AAqDtC,MAAMgB,OAAO,GAAG,MAAM;AACrB,QAAMG,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,sBAArB,KAAgD,IAA9D;AACC,QAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;;AAEA,MAAIJ,KAAJ,EAAW;AACTG,IAAAA,OAAO,CAACE,MAAR,CAAe,eAAf,EAAgC,YAAYL,KAA5C;AACD;;AAED,SAAOM,KAAK,CAAE,cAAF,EAAiB;AAAEH,IAAAA,OAAO,EAAEA;AAAX,GAAjB,CAAL,CAA4CI,IAA5C,CAAiD,MAAM;AAC5DC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBF,MAAM,CAACC,QAAP,CAAgBE,QAAvC;AACD,GAFM,CAAP;AAGD,CAXD;;AAaA,MAAMb,QAAQ,GAAG,MAAM;AACrB,SAAOQ,KAAK,CAAE,oBAAF,CAAL,CAA4BC,IAA5B,CAAiC,MAAM;AAC5CC,IAAAA,MAAM,CAACC,QAAP,CAAgBG,MAAhB;AACD,GAFM,CAAP;AAGD,CAJD;;AAUA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAElC,EAAAA;AAAF,CAAD,KAA4B;AAClD,SACE;AAAQ,IAAA,OAAO,EAAE,MAAMA,GAAG,CAACmC,MAAJ,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnC,GAAG,CAACC,OAAJ,GAAc,gBAAd,GAAiC,gBADpC,CADF;AAKD,CANM","sourcesContent":["import App from 'next/app'\nimport { TinaCMS, TinaProvider } from 'tinacms'\nimport {\n  GithubClient,\n  TinacmsGithubProvider,\n} from 'react-tinacms-github'\n\nexport default class Site extends App {\n  cms: TinaCMS\n\n  constructor(props) {\n    super(props)\n    /**\n     * 1. Create the TinaCMS instance\n     */\n    this.cms = new TinaCMS({\n      enabled: props.pageProps.preview,\n      apis: {\n        /**\n         * 2. Register the GithubClient\n         */\n        github: new GithubClient({\n          proxy: '/api/proxy-github',\n          authCallbackRoute: '/api/create-github-access-token',\n          clientId: process.env.GITHUB_CLIENT_ID,\n          baseRepoFullName: process.env.REPO_FULL_NAME, // e.g: tinacms/tinacms.org,\n        }),\n      },\n      /**\n       * 3. Use the Sidebar and Toolbar\n       */\n      sidebar: props.pageProps.preview,\n      toolbar: props.pageProps.preview,\n    })\n  }\n\n  render() {\n    const { Component, pageProps } = this.props\n    return (\n      /**\n       * 4. Wrap the page Component with the Tina and Github providers\n       */\n      <TinaProvider cms={this.cms}>\n        <TinacmsGithubProvider\n          onLogin={onLogin}\n          onLogout={onLogout}\n          error={pageProps.error}\n        >\n          {/**\n           * 5. Add a button for entering Preview/Edit Mode\n           */}\n          <EditLink cms={this.cms} />\n          <Component {...pageProps} />\n        </TinacmsGithubProvider>\n      </TinaProvider>\n    )\n  }\n}\n\n\nconst onLogin = () => {\n\tconst token = localStorage.getItem('tinacms-github-token') || null\n  const headers = new Headers()\n\n  if (token) {\n    headers.append('Authorization', 'Bearer ' + token)\n  }\n\n  return fetch(`/api/preview`, { headers: headers }).then(() => {\n    window.location.href = window.location.pathname\n  })\n}\n\nconst onLogout = () => {\n  return fetch(`/api/reset-preview`).then(() => {\n    window.location.reload()\n  })\n}\n\nexport interface EditLinkProps {\n  cms: TinaCMS\n}\n\nexport const EditLink = ({ cms }: EditLinkProps) => {\n  return (\n    <button onClick={() => cms.toggle()}>\n      {cms.enabled ? 'Exit Edit Mode' : 'Edit This Site'}\n    </button>\n  )\n}"]},"metadata":{},"sourceType":"module"}